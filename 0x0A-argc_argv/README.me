# General
This section covers essential topics related to C programming and using arguments in your program.

## How to Use Arguments Passed to Your Program
In C programming, you can access command-line arguments passed to your program using the `argc` and `argv` parameters in the `main` function. `argc` holds the count of arguments, and `argv` is an array of strings containing the argument values.

## Two Prototypes of Main and When to Use Each
There are two common prototypes for the `main` function in C:

1. `int main(void)`: Use this prototype when your program doesn't accept any command-line arguments. It indicates that the `main` function takes no arguments.
2. `int main(int argc, char *argv[])`: Use this prototype when your program expects command-line arguments. `argc` represents the number of arguments, and `argv` is an array of strings containing the argument values.

## Using __attribute__((unused)) or (void) for Unused Variables/Parameters
In C, you might encounter situations where you define variables or parameters that you don't use within a function. To avoid compiler warnings about unused variables, you can use the `__attribute__((unused))` attribute. Alternatively, you can cast the variable to `(void)` to explicitly indicate that it's intentionally unused.

Example using `__attribute__((unused))`:

```c
void example_function(int unused_variable) {
    int __attribute__((unused)) unused_var = unused_variable;
    // Code without using unused_var
}
